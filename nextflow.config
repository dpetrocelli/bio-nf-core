/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Bio-NF-Core Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// Global default params, used in configs
params {

    // Input options
    input                      = './data/test_data/*.fasta'
    
    // Output options
    outdir                     = './results'
    publish_dir_mode           = 'copy'

    // References
    genome                     = null
    
    // Boilerplate options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null

    // Max resource options
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes'
    validationShowHiddenParams       = false
    validate_params                  = true

}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file to define DSL2 per module options and publish directories
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/fastqc" },
            mode: params.publish_dir_mode,
            pattern: "*.{html,zip}"
        ]
    }
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config options for different compute environments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load advanced resource configuration  
includeConfig 'conf/resources.config'

profiles {
    debug { 
        process.beforeScript = 'echo $HOSTNAME' 
    }
    
    // EJECUCIÓN LOCAL - Sin contenedores
    standard {
        // Usa software instalado localmente
        docker.enabled = false
        singularity.enabled = false
    }
    
    // EJECUCIÓN CON DOCKER - Recomendado
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        docker.runOptions      = '-u $(id -u):$(id -g)'
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    
    // EJECUCIÓN CON SINGULARITY - Para HPC
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    
    // EJECUCIÓN EN KUBERNETES - Para producción
    k8s {
        process.executor       = 'k8s'
        k8s.namespace          = 'default'
        k8s.serviceAccount     = 'nextflow'
        docker.enabled         = true
        docker.registry        = 'your-registry.com'
    }
    
    // TESTING - Configuración para tests
    test { 
        includeConfig 'conf/test.config'
        docker.enabled = true
    }
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow metrics and reports - SIEMPRE en logs/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

timeline {
    enabled = true
    file    = "/mnt/c/Users/impulsate/Documents/GitHub/bio-nf-core/logs/execution_timeline.html"
}
report {
    enabled = true
    file    = "/mnt/c/Users/impulsate/Documents/GitHub/bio-nf-core/logs/execution_report.html"
}
trace {
    enabled = true
    file    = "/mnt/c/Users/impulsate/Documents/GitHub/bio-nf-core/logs/execution_trace.txt"
}
dag {
    enabled = true
    file    = "/mnt/c/Users/impulsate/Documents/GitHub/bio-nf-core/logs/pipeline_dag.svg"
}

// También redirigir logs de trabajo - siempre en la raíz del proyecto
workDir = "/mnt/c/Users/impulsate/Documents/GitHub/bio-nf-core/logs/work"

// Log principal de Nextflow
if (params.nextflow_log) {
    // Permitir override del log principal
} else {
    // Por defecto en logs/
    // Nota: .nextflow.log se genera automáticamente en el directorio actual
}

manifest {
    name            = 'bio-nf-core'
    author          = 'Bio Pipeline Course'
    homePage        = 'https://github.com/user/bio-nf-core'
    description     = 'Pipeline bioinformático educativo con contenedores'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0dev'
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Function to ensure that resource requirements don't go beyond
    a maximum limit
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}